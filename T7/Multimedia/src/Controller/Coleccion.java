package Controller;

import model.Elemento;
import model.Video;

import java.util.ArrayList;
import java.util.Objects;
import java.util.Scanner;

/*1. (ListaMultimedia)
Desarrollar una aplicaci칩n para la gesti칩n de una colecci칩n multimedia. Todo elemento multimedia tiene 5 caracter칤sticas; identificador, titulo, autor, tama침o, formato. Adicionalmente cada uno de los elementos tendr치n:
a. Libro (ISBN, n칰mero de p치ginas)
b. Video (director, actores)
c. Audio (duraci칩n, soporte)
La aplicaci칩n deber치 poder manejar cualquier tipo de objeto, dando la posibilidad de:
游눠 El director ser치 una persona con nombre y dni. Los actores ser치n un conjunto de objetos con nombre y dni
1. A침adir a la colecci칩n (preguntara que tipo de objeto y los elementos correspondientes)
a. Los datos ser치n pedidos por consola
b. Una vez a침adido el programa mostrar치 una confirmaci칩n de que el elemento
est치 bien a침adido
2. Eliminar de la colecci칩n
a. Se pedir치 el identificador del elemento a eliminar
b. Una vez eliminado el programa mostrar치 una confirmaci칩n de que el elemento
est치 bien eliminado
3. Listar elementos
a. Video
b. Audio
c. Todos
4. Salir
Los listados mostrar치n informaci칩n completa de los elementos en cuesti칩n.
La restricci칩n que se pone a la colecci칩n es que no se pueden a침adir elementos con el mismo id.
**(MODIFICACION)**
Dentro del men칰, poner tres opciones nuevas:
1. Buscar por autor: introducir칠 el nombre de un autor y me dir치 el t칤tulo de todos los libros de tenga
2. Buscar por actor: se introducir치 el nombre de un actor y se mostrar치 el t칤tulo de todas las pel칤culas donde aparezca
3. Buscar por director: se introducir치 el nombre de un director y s emostar치n todas las pel칤culas que tenga*/
public class Coleccion {
    private ArrayList<Elemento>listaElementos;
    private int identificador;
    Scanner scanner=new Scanner(System.in);
    public void aniadirElementos(Elemento elemento){
        if(estaElemento(elemento.getId())==null){
            this.listaElementos.add(elemento);
            System.out.println("Agregado correctamente.");
        }else {
            System.out.println("Elemento duplicado.");
        }

    }
    public void ListarElementos(){
        for (Elemento item : listaElementos) {
            item.mostrarDatos();
        }
    }

    public Elemento estaElemento(int  id){
        for (Elemento item : listaElementos) {
            if(item.getId()==id){
                return item;
            }

        }
        return null;
    }
    public Coleccion() {
        this.listaElementos = new ArrayList<>();
    }

    public void buscarElemento(int id){
        for (Elemento item : listaElementos) {
            if(item.getIdentificador()==id){
                System.out.println("Elemento encontrado");
                item.mostrarDatos();
                break;
            }
        }
    }
    public void buscarElementoNombre(String nombre){
        for (Elemento item : listaElementos) {
            if(Objects.equals(item.getAutor().getNombre(), nombre)){
                System.out.println("Elemento encontrado");
                item.mostrarDatos();
                break;
            }
        }
    }
    public void elimimnarElemento(int id){
        for (Elemento item : listaElementos) {
            if(item.getIdentificador()==id){
                System.out.println("Elemento encontrado");
                listaElementos.remove(item);
                break;
            }
        }
    }
    public void elimimnarDirector(String nombre){
        for (Elemento item : listaElementos) {
            if(item instanceof Video){
                ((Video) item).getDirector().getNombre().equalsIgnoreCase(nombre);
                    item.mostrarDatos();
                    break;
                }
            }
        }
    }


